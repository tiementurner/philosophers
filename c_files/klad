	while (1)
	{
		gettimeofday(&table->time, NULL);
		if (table->time.tv_sec > table->previous_sec)
			ms += (1000000 - table->previous_usec + table->time.tv_usec) / 1000;
		else
			ms += (table->time.tv_usec - table->previous_usec) / 1000;
		table->previous_sec = table->time.tv_sec;
		table->previous_usec = table->time.tv_usec;
	//	printf("%d\n", ms);
	}


	
	
	
	
	
		gettimeofday(&table->philo_list[id].time, NULL);
	table->philo_list[id].previous_sec = table->philo_list[id].time.tv_sec;
	table->philo_list[id].previous_usec = table->philo_list[id].time.tv_usec;
	while (1)
	{
		gettimeofday(&table->philo_list[id].time, NULL);
		if (table->philo_list[id].time.tv_sec > table->philo_list[id].previous_sec)
			table->philo_list[id].milliseconds_counted += (1000000 - table->philo_list[id].previous_usec + table->philo_list[id].time.tv_usec) / 1000;
		else
			table->philo_list[id].milliseconds_counted += (table->philo_list[id].time.tv_usec - table->philo_list[id].previous_usec) / 1000;
		table->philo_list[id].previous_sec = table->philo_list[id].time.tv_sec;
		table->philo_list[id].previous_usec = table->philo_list[id].time.tv_usec;
		//printf("%d\n", table->philo_list[id].milliseconds_counted);
		if (table->philo_list[id].milliseconds_counted > 1000)
			printf("philo %d is changing state\n", id);
		//printf("%d\n", table->philo_list[id].milliseconds_counted);
	}



void	*timer_thread(void *arg)
{
	int ms;
	t_table *table;

	table = (t_table *) arg;
	table->milliseconds_counted = &ms;
	gettimeofday(&table->time, NULL);
	table->previous_sec = table->time.tv_sec;
	table->previous_usec = table->time.tv_usec;
	while (1)
	{
		gettimeofday(&table->time, NULL);
		if (table->time.tv_sec > table->previous_sec)
		{
			pthread_mutex_lock(&table->lock);
			ms += (1000000 - table->previous_usec + table->time.tv_usec) / 1000;
			pthread_mutex_unlock(&table->lock);
		}
		else
		{
			pthread_mutex_lock(&table->lock);
			ms += (table->time.tv_usec - table->previous_usec)/ 1000;
			pthread_mutex_unlock(&table->lock);
		}
		table->previous_sec = table->time.tv_sec;
		table->previous_usec = table->time.tv_usec;
		//printf("%d\n", ms);
	}


	10.2
	11.1

	11 - 10 * 1000 + 100 - 200


void			put_fork_back(t_table *table, t_philosopher *philo)
{
	if (philo->left_taken == 1)
	{
		pthread_mutex_lock(&table->lock[philo->left]);
		table->fork_list[philo->left] = ON_TABLE;
		pthread_mutex_unlock(&table->lock[philo->left]);
//		printf("%d %d has put fork back fork num :%d\n", table->timestamp, philo->id + 1, philo->left);
		philo->forks_in_hand = 0;
		philo->left_taken = 0;
	}
	if (philo->right_taken == 1)
	{
		pthread_mutex_lock(&table->lock[philo->right]);
		table->fork_list[philo->right] = ON_TABLE;
		pthread_mutex_unlock(&table->lock[philo->right]);
//		printf("%d %d has put fork back\n", table->timestamp, philo->id + 1);
		philo->forks_in_hand = 0;
		philo->right_taken = 0;
	}
	usleep(philo->id % 2 * 100);
}
